About some JS Library:

1. HTML 5 shiv (html5shiv.min.js)
= HTML5Shiv is a JavaScript workaround, created by Sjoerd Visscher, to enable styling of HTML5 elements in versions of Internet Explorer prior to version 9, which do not allow unknown elements to be styled without JavaScript.

2. Modernizr (modernizr.js)
= Modernizr is a JavaScript library which is designed to detect HTML5 and CSS3 features in various browsers, which lets JavaScript avoid using unimplemented features or use a workaround such as a shim to emulate them.
Modernizr determines whether the user's browser has implemented a given feature.[6][7][8][9] This lets developers take advantage of new features that browsers support, yet create fallbacks for browsers that lack support.
Modernizr JavaScript example:
-----------------------------
Ex- To check support of websocket in your web-browser:
 if ( Modernizr.websockets ) {
	console.log('Your browser supports WebSockets.');
  } else {
	console.log('Your browser does not support WebSockets.');
  }
Modernizr CSS example:
---------------------
<html>
<head>
  <style>
	.wsno,
	.wsyes { display: none; }
	/* Modernizr will add one of the following classes to the HTML element based on
             whether or not WebSockets is supported by the user's browser. */
	.no-websockets .wsno,
	.websockets .wsyes { display: block; }
  </style>
  <script src="path/to/modernizr.js"></script>
</head>
<body>	
   <p class="wsno">Your browser does not support WebSockets.</p>
   <p class="wsyes">Your browser supports WebSockets.</p>
</body>
</html>

3. Electron JS
= Build cross platform desktop apps with JavaScript, HTML, and CSS.
Electron is a framework for creating native applications with web technologies like JavaScript, HTML, and CSS. It takes care of the hard parts so you can focus on the core of your application.
The following hard parts made easy:
1. Automatic updates
2. Native menus & notifications
3. App crash reporting
4. Debugging & profiling
5. Windows installers
= Editors like atom, visual studio code is built on Electron JS.

4. Loki Js
= 
What is LokiJS?
> In-Browser NoSQL db with syncing and persisting
> Persistable NoSQL db for Cordova / Phonegap / Nativescript
> Embeddable NoSQL db with Persistence for node-webkit
> a Redis-style store an npm install away
LokiJS is an in-memory database which prioritises performance over everything * 
LokiJS supports field indexing for faster document access and performs really well (over 1.1M ops/s on an average dev machine) on those. 
Its built-in DynamicView class also enables to utilize indexes on data subsets for even faster performance.
Among the features that make LokiJS attractive are:
> Fast Performance
> Replaces SQLite in Cordova, works as a session store and full blown NoSQL db in node.js, works as in-browser database with syncing capabilities
> Indexing / Secondary Indexing / Unique Indexing
> The "Dynamic View", a kind of "live filter" (self-materializing views)
> Resultset with Fluent API
> Persistence Adapters (with a built-in IndexedDB and node.js FS adapter)
> Optional periodic autosave
> Changes API
> Compound sort for sorting on multiple columns
> Insert class instances and deserialize/ inflate objects into class instances
> partial compatibility with MongoDB API
> RethinkDB-style Joins


-------------------------------------------------------------------------------------------------

> shame.css library
